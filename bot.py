import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.filters import CommandStart, and_f
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = {int(i) for i in os.getenv("ADMIN_IDS", "338313433").split(",")}
GROUP_INVITE_LINK = os.getenv("GROUP_INVITE_LINK", "https://t.me/+your_invite_link")
HOST = os.getenv("RENDER_EXTERNAL_HOSTNAME")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not API_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
if not HOST:
    logger.error("RENDER_EXTERNAL_HOSTNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    raise ValueError("RENDER_EXTERNAL_HOSTNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –í –ø–∞–º—è—Ç–∏ —Ö—Ä–∞–Ω–∏–º –∑–∞—è–≤–∫–∏ {user_id: —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏}
requests = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def start(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É, –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É:")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞—è–≤–∫–∞)
@dp.message(and_f(lambda m: m.text, lambda m: not m.from_user.is_bot))
async def handle_request(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    text = message.text.strip()

    if not text:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—É –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è üôÇ")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    requests[user_id] = text

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve:{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{user_id}")
        ]
    ])

    msg_text = f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ\nüë§ @{username}\nüí¨ {text}"
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, msg_text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.reply("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ approve/reject
@dp.callback_query(lambda c: c.data.startswith(("approve:", "reject:")))
async def process_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        return await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏.", show_alert=True)

    action, user_id_str = callback.data.split(":")
    user_id = int(user_id_str)

    reason = requests.pop(user_id, None)
    if not reason:
        return await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)

    try:
        if action == "approve":
            await bot.send_message(user_id, f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –í–æ—Ç —Å—Å—ã–ª–∫–∞: {GROUP_INVITE_LINK}")
            await callback.message.edit_text(
                f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ: @{callback.from_user.username or callback.from_user.first_name} "
                f"–æ–¥–æ–±—Ä–∏–ª –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )
        else:  # reject
            await bot.send_message(user_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            await callback.message.edit_text(
                f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: @{callback.from_user.username or callback.from_user.first_name} "
                f"–æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )
        await callback.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)

# Webhook: –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
async def on_startup(_=None):
    webhook_url = f"https://{HOST}/webhook"
    try:
        await bot.set_webhook(webhook_url, drop_pending_updates=True)
        logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        raise

async def on_shutdown(_=None):
    try:
        await bot.delete_webhook()
        logger.info("Webhook —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")

# –ó–∞–ø—É—Å–∫ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    try:
        app = web.Application()
        SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path='/webhook')
        setup_application(app, dp, bot=bot)
        port = int(os.getenv("PORT", 10000))
        logger.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        web.run_app(app, host='0.0.0.0', port=port)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        raise

if __name__ == "__main__":
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    main()

